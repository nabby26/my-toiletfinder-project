
function initialiseMap() {
   // initMap();
   initAutocomplete();
}

var mel_cbd = {lat:-37.8136, lng: 144.9631};

function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 14,
    center: mel_cbd
  });

  var infoWin = new google.maps.InfoWindow();
  var markers = locations.map(function(location, i) {
    var marker = new google.maps.Marker({
      position: location
    });
    google.maps.event.addListener(marker, 'click', function(evt) {
      infoWin.setContent(location.info);
      infoWin.open(map, marker);
    })
    return marker;
    // return new google.maps.Marker({
    //   position: location
    // });
  }); 

  // Add a marker clusterer to manage the markers.
  var markerCluster = new MarkerClusterer(map, markers,
      {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});
}


<% toilets = Toilet.new.get_public_toilets %>
<% admin_toilets = Toilet.all %>
  var locations = [
            <% toilets.each do |toilet| %>
            <%
              title = toilet.title.gsub(/"/,"'")
              content = "<h5> #{title} <br><small>"+
                        "<strong>Parentsroom:</strong> #{toilet.parentsRoom}"+
                        "<br><strong>Female:</strong> #{toilet.female}"+
                        "<br><strong>Male:</strong> #{toilet.male}"+
                        "<br><strong>Disabled opt:</strong> #{toilet.disabled_opt}</small></h5>"
            %>
            {  
              lat:  <%= toilet.lat %>, 
              lng:  <%= toilet.lon %>, 
              info: "<%=content %>"
            }, 
          <% end %>
          <% admin_toilets.each do |toilet| %>
            <%
              title = toilet.title.gsub(/"/,"'")
              content = "<h5> #{title} <br><small>"+
                        "<strong>Parentsroom:</strong> #{toilet.parentsRoom}"+
                        "<br><strong>Female:</strong> #{toilet.female}"+
                        "<br><strong>Male:</strong> #{toilet.male}"+
                        "<br><strong>Disabled opt:</strong> #{toilet.disabled_opt}</small></h5>"
            %>
            {  
              lat:  <%= toilet.lat %>, 
              lng:  <%= toilet.lon %>, 
              info: "<%=content %>"
            }, 
          <% end %>
          ]; 
function initAutocomplete() {
    var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 14,
    center: mel_cbd
  });

  var infoWin = new google.maps.InfoWindow();
  var markers = locations.map(function(location, i) {
      var marker = new google.maps.Marker({
        position: location
      });
        google.maps.event.addListener(marker, 'click', function(evt) {
        infoWin.setContent(location.info);
        infoWin.open(map, marker);
    })
    return marker;
    // return new google.maps.Marker({
    //   position: location
    // });
  }); 

  // Add a marker clusterer to manage the markers.
  var markerCluster = new MarkerClusterer(map, markers,
      {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});
  
  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var markers = [];
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
      var icon = {
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
}